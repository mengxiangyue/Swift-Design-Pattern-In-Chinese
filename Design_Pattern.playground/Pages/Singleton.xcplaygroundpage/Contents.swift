/*:
 ### **Singleton**
 ---
 
 [回到列表](Index)
 
 1. 定义:单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例。即一个类只有一个对象实例。
 2. 问题:在星球大战中，有一个死星激光炮。（没看过星战，一直不懂下面单次怎么翻译）
 3. 解决方案:定义一个激光类，并且保证只有一个实例。
 4. 使用方法：
     1. 定义一个public 的类变量，并且赋值。
     2. 私有化构造函数方法。
 5. 优点:
     1. 提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。
     2. 由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。
     3. 允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。
 6. 缺点:
     1. 由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。
     2. 单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。
     3. 滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；
 */


import Foundation

// 死星激光炮
class DeathStarSuperlaser {
    static let sharedInstance = DeathStarSuperlaser()
    
    private init() {
        // 私有化构造函数保证只创建一个实例
    }
}
/*:
 ### Usage:
 */
let laser = DeathStarSuperlaser.sharedInstance
